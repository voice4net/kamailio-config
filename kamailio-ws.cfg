#!KAMAILIO

#!define DBURL "mysql://kamailio:__PASSWORD__@localhost/kamailio"
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define FLT_WS 8
#!define SRC_WS 9
#!define DST_WS 10
#!define REG_SOCK 11
#!define SIP_TRACE 12
#!define MAX_WS 200

#!subst "/REGISTRAR_IP/__REGISTRAR_IP__/"
#!subst "/REGISTRAR_PORT/5060/"

#!substdef "!MY_IP_ADDR!__IP_ADDRESS__!g"
#!substdef "!MY_DOMAIN!__DOMAIN_NAME__!g"
#!substdef "!MY_WSS_PORT!1443!g"
#!substdef "!MY_WSS_ADDR!tls:MY_DOMAIN:MY_WSS_PORT!g"
#!substdef "!MY_HTTP_PORT!8080!g"
#!substdef "!MY_HTTP_ADDR!tcp:MY_DOMAIN:MY_HTTP_PORT!g"
#!substdef "!MY_HTTPS_PORT!8443!g"
#!substdef "!MY_HTTPS_ADDR!tls:MY_DOMAIN:MY_HTTPS_PORT!g"

####### Global Parameters #########

debug=2
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=4
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
force_rport=yes
listen=MY_IP_ADDR
listen=MY_DOMAIN
listen=MY_WSS_ADDR
listen=MY_HTTP_ADDR
listen=MY_HTTPS_ADDR
port=5060

tcp_max_connections=4096
tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384
enable_tls=yes

####### Modules Section ########

loadmodule "db_mysql.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "path.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "jsonrpcs.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "permissions.so"
loadmodule "nathelper.so"
loadmodule "sqlops.so"
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "tls.so"
loadmodule "rtpengine.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"
loadmodule "htable.so"
loadmodule "regex.so"
loadmodule "ctl.so"
loadmodule "siptrace.so"
loadmodule "uac.so"
loadmodule "jansson.so"
loadmodule "ipops.so"

# ----------------- setting module-specific parameters --------------- #

# ----- tm params ----- #
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "auto_inv_100_reason", "Trying")

# ----- rr params ----- #
modparam("rr", "append_fromtag", 1)

# ----- usrloc params ----- #
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", 0)

# ----- registrar params ----- #
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "outbound_mode", 0)
modparam("registrar", "received_avp", "$avp(RECEIVED)")
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 2)
modparam("registrar", "path_use_received", 0)
modparam("registrar", "xavp_cfg", "reg")
modparam("registrar", "sock_flag", REG_SOCK)
modparam("registrar", "xavp_rcd", "ulrcd")

# ----- permissions params ----- #
modparam("permissions","db_url",DBURL)
modparam("permissions","db_mode",1)

# ----- nathelper params ----- #
modparam("nathelper","natping_interval",30)
modparam("nathelper","ping_nated_only",0)
modparam("nathelper","sipping_bflag",FLB_NATSIPPING)
modparam("nathelper","sipping_from","sip:pinger@voice4net.net")
modparam("nathelper","sipping_method","OPTIONS")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

# ----- websocket params ----- #
modparam("websocket","keepalive_mechanism",1)
modparam("websocket","keepalive_timeout",30)
modparam("websocket","keepalive_processes",1)
modparam("websocket","keepalive_interval",2)

# ----- sqlops params ----- #
modparam("sqlops","sqlcon","routing=>mysql://kamailio:__PASSWORD__@localhost/kamailio")

# ----- tls params ----- #
modparam("tls","private_key","/etc/kamailio/ssl/epbxcomcertandkey.pem")
modparam("tls","certificate","/etc/kamailio/ssl/epbxcomcertandkey.pem")
modparam("tls","verify_certificate",0)
modparam("tls","require_certificate",0)

# ----- rtpengine params ----- #
modparam("rtpengine","rtpengine_sock","udp:127.0.0.1:2223")

# ----- htable params ----- #
modparam("htable","db_url",DBURL)
modparam("htable","htable","user_agents=>size=7;autoexpire=0;dbtable=user_agents;dbmode=0")
modparam("htable","htable","http_origins=>size=7;autoexpire=0;dbtable=http_origins;cols='http_origin,active';dbmode=0")
modparam("htable","htable","websockets=>size=10;autoexpire=0;initval=0")

# ----- uac params ----- #
modparam("uac","restore_mode","none")

# ----- jsonrpcs params ----- #
modparam("jsonrpcs","pretty_format",1)

# ----- siptrace params ----- #
modparam("siptrace","trace_on",1)
modparam("siptrace","trace_flag",SIP_TRACE)
modparam("siptrace","trace_to_database",0)
modparam("siptrace","duplicate_uri","sip:__HOMER_IP__:9060")
modparam("siptrace","hep_capture_id",2078)
modparam("siptrace","hep_mode_on",1)
modparam("siptrace","trace_mode",0)

# ----- ctl params ----- #
modparam("ctl","mode",0770)
modparam("ctl","user","kamailio")
modparam("ctl","group","kamailio")

####### Routing Logic ########

request_route
{
	route(REQINIT);

	route(OPTIONS);

	xlog("L_INFO","SIP Request: SourceIP=$si:$sp;Method=$rm;From=$fu;To=$tu;Message=$mb");

	sip_trace();
	setflag(SIP_TRACE);

	# NAT detection
	route(NATDETECT);

	# websocket detection
	route(WSDETECT);

	if (is_method("CANCEL"))
	{
		if (t_check_trans())
		{
			route(RELAY);
		}

		exit;
	}

	# route messages within existing dialogs
	route(WITHINDLG);

	# handle retransmissions
	if (t_precheck_trans())
	{
		t_check_trans();
		exit;
	}

	t_check_trans();

	# route REGISTER requests
	route(REGISTER);

	if ($rU==$null)
	{
		xlog("L_INFO","request_route: no user name in request URI...\n");

		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# route requests from registered devices with valid AORs
	route(LOCATION);

	# route requests from trusted source domains
	route(SIPOUT);

	xlog("L_INFO","request_route: send a 404 Not Found and exit.\n");
	sl_send_reply("404","Not Found");
	exit;
}

route[RELAY]
{
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE"))
	{
		if (!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|REGISTER|SUBSCRIBE|NOTIFY|UPDATE"))
	{
		if (!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE"))
	{
		route(SETUP_BY_TRANSPORT);
		if (!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	# record routing for dialog forming requests (in case they are routed)
	if (!is_method("REGISTER"))
	{
		xlog("L_INFO","route(RELAY): record route...\n");
		record_route();
	}

	if (!t_relay())
	{
		xlog("L_INFO","route(RELAY): message relay failed!\n");
		sl_reply_error();
	}

	exit;
}

route[SETUP_BY_TRANSPORT]
{
	if (proto == WS || proto == WSS)
	{
		xlog("L_INFO", "route[SETUP_BY_TRANSPORT]: request coming from websocket");
		route(RTPPROXY);

		return;
	}

	if ($(ru{uri.param,transport}) =~ "ws")
	{
		xlog("L_INFO", "route[SETUP_BY_TRANSPORT]: request is going from the registrar to the websocket UA.");

		route(RTPPROXY);

		return;
	}

	xlog("L_INFO", "route[SETUP_BY_TRANSPORT]: This is a non-WebRTC phone call");
}

route[REQINIT]
{
	if ($ua =~ "friendly-scanner|VaxSIPUserAgent|sipcli|sipsak|SIPp|hamdan")
	{
		exit;
	}

	if (is_method("INVITE|REGISTER|SUBSCRIBE|OPTIONS"))
	{
		if (!is_present_hf("User-Agent") && !is_present_hf("Server"))
		{
			exit;
		}

		$var(user_agent)=$ua;

		if (is_present_hf("Server") && !is_present_hf("User-Agent"))
		{
			$var(user_agent)=$hdr(Server);
		}

		$var(allowed)=0;

		sht_iterator_start("ua_iterator","user_agents");

		while (sht_iterator_next("ua_iterator"))
		{
			if ($shtitval(ua_iterator)==1 && $var(user_agent) =~ $shtitkey(ua_iterator))
			{
				$var(allowed)=1;
				break;
			}
		}

		sht_iterator_end("ua_iterator");

		if ($var(allowed)==0)
		{
			exit;
		}
	}

	if (!mf_process_maxfwd_header("10"))
	{
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

route[OPTIONS]
{
	# is this an OPTIONS request ???
	# OR a keep-alive NOTIFY (the Cisco phones send a NOTIFY instead of OPTIONS)
	if (is_method("OPTIONS") || (is_method("NOTIFY|MESSAGE") && is_present_hf("Event") && $hdr(Event)=="keep-alive"))
	{
		if (uri==myself || proto == WS || proto == WSS)
		{
			append_to_reply("P-Hint: $HN(n)\r\n");
			sl_send_reply("200","OK");
			exit;
		}

		route(RELAY);
		exit;
	}
}

route[NATDETECT]
{
	force_rport();

	if (proto==WS || proto==WSS || nat_uac_test(55))
	{
		xlog("L_INFO","route[NATDETECT]: UA is behind NAT!\n");

		xlog("L_INFO","route[NATDETECT]: set FLT_NATS flag...\n");
		setflag(FLT_NATS);

		if (is_first_hop())
		{
			xlog("L_INFO","route[NATDETECT]: fix nated contact...\n");
			fix_nated_contact();

			if (is_request() && is_method("INVITE") && has_body("application/sdp"))
			{
				xlog("L_INFO","route[NATDETECT]: fix nated sdp...\n");
				fix_nated_sdp("3");
			}

			if (is_reply() && t_check_status("(200)|(183)") && has_body("application/sdp"))
			{
				xlog("L_INFO","route[NATDETECT]: fix nated sdp...\n");
				fix_nated_sdp("3");
			}
		}
	}
}

route[WSDETECT]
{
	if (proto == WS || proto == WSS)
	{
		xlog("L_INFO","route[WSDETECT]: the calling party is a websocket UA");

		xlog("L_INFO","route[WSDETECT]: set FLT_WS flag...\n");
		setflag(FLT_WS);
		setflag(SRC_WS);
	}

	if ($(ru{uri.param,transport}) =~ "ws")
	{
		xlog("L_INFO","route[WSDETECT]: the called party is a websocket UA");

		xlog("L_INFO","route[WSDETECT]: set FLT_WS flag...\n");
		setflag(FLT_WS);
		setflag(DST_WS);
	}
}

# signaling updates for NAT traversal
route[NATMANAGE]
{
	if (is_request())
	{
		xlog("L_INFO","route[NATMANAGE]: IsRequest=TRUE;SipMethod=($rm);SourceIP=($si);SourcePort=($sp);RequestURI=($ru);\n");
		xlog("L_INFO","route[NATMANAGE]: ToURI=($tu);ToDisplayName=($tn);ToTag=($tt);IsRequest=TRUE\n");
		if (has_totag())
		{
			xlog("L_INFO","route[NATMANAGE]: HasToTag=TRUE;ToTag=($tt)\n");
			if (check_route_param("nat=yes"))
			{
				xlog("L_INFO","route[NATMANAGE]: route header contains 'nat=yes'. set FLB_NATB flag...\n");
				setbflag(FLB_NATB);
			}
		}
	}

	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
	{
		xlog("L_INFO","route[NATMANAGE]: no NAT flags are set. exit.\n");
		return;
	}

	if (is_request())
	{
		if (!has_totag())
		{
			if (t_is_branch_route())
			{
				add_rr_param(";nat=yes");
			}
		}
	}
}

route[SIPOUT]
{
	xlog("L_INFO","route[SIPOUT]: check the source ip of the message...\n");
	xlog("L_INFO","route[SIPOUT]: SourceIP=$si\n");

	if (!allow_source_address())
	{
		xlog("L_INFO","route[SIPOUT]: source ip is NOT allowed!\n");

		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}

	loose_route();

	route(RELAY);
	exit;
}

route[LOCATION]
{
	$var(aor)="sip:"+$fU+"@"+$fd;

	xlog("L_INFO","route[LOCATION]: SourceAddressURI=$su;FromUser=$var(aor)\n");

	$xavp(regcfg=>match_received)=$su;

	if (is_request() && registered("location","$var(aor)",2))
	{
		xlog("L_INFO","route[LOCATION]: UA is a registered sip device. relay the message...\n");

		loose_route();

		route(RELAY);
		exit;
	}
}

route[WITHINDLG]
{
	if (!has_totag()) return;

	if (loose_route())
	{
		if (is_method("ACK"))
		{
			# ACK is forwarded statelessy
			route(NATMANAGE);
		}

		route(RELAY);
		exit;
	}

	if (is_method("ACK"))
	{
		if (t_check_trans())
		{
			route(RELAY);
			exit;
		}
	}
}

route[REGISTER]
{
	if (is_method("REGISTER"))
	{
		xlog("L_INFO","route[REGISTER]: Method=REGISTER\n");

		sl_send_reply("100","Trying");

		xlog("L_INFO","route[REGISTER]: add path...\n");
		add_path();

		if (uri==myself)
		{
			xlog("L_INFO","route[REGISTER]: modify the destination uri...\n");
			$du="sip:REGISTRAR_IP:REGISTRAR_PORT";
		}

		if (isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
		}

		if (proto!=WS && proto!=WSS)
		{
			# only enable sip ping for non websockets
			# enable sip pinging for ALL non-WS registered devices, not just those behind NAT b/c phones that use STUN servers don't *appear* nated but really are
			setbflag(FLB_NATSIPPING);
		}

		# get the protocol on which this message was received
		$var(proto)=$pr;

		# the registrar module's 'save' function doesn't like ws/wss. convert to tcp/tls
		if ($var(proto)=="ws")
		{
			$var(proto)="tcp";
		}
		else if ($var(proto)=="wss")
		{
			$var(proto)="tls";
		}

		xlog("L_INFO","route[REGISTER]: proto=$var(proto)\n");

		# save the ua's socket info to $xavp(reg->socket)
		$xavp(reg=>socket)=$var(proto)+":"+$Ri+":"+$Rp;

		xlog("L_INFO","route[REGISTER]: sock_info=$xavp(reg=>socket)\n");

		# set the received avp here so that it gets saved to the AOR after the registrar replies with 200 OK
		$avp(RECEIVED)="sip:"+$si+":"+$sp+";transport="+$var(proto)+";domain="+$td;

		xlog("L_INFO","route[REGISTER]: received_uri=$avp(RECEIVED)\n");

		# set the socket flag so the registrar module's 'save' function will pull the socket info from $xavp(reg=>socket)
		setflag(REG_SOCK);

		# store the ua's User-Agent header value so it can be saved in the AOR after the registrar replies with 200 OK
		$avp(uac)=$ua;

		xlog("L_INFO","route[REGISTER]: uac=$avp(uac)\n");

		if (proto==WS || proto==WSS)
		{
			# store the ws connection info in avp variables to be retrieved later
			$avp(connection_id)=$conid;
			$avp(websocket_endpoint)=$si+":"+$sp;
		}

		route(RELAY);
		exit;
	}
}

route[RTPPROXY]
{
	# for now only calls involving a WebRTC client will be using rtp proxy, so if the FLT_WS flag is not set, GTFO
	if !(isflagset(FLT_WS))
		return;

	if (is_reply() && (status=~"[3456][0-9][0-9]"))
	{
		rtpengine_delete();
		return;
	}

	if (is_reply() && !(status=~"[12][0-9][0-9]"))
		return;

	if (is_method("BYE|CANCEL"))
	{
		rtpengine_delete();
		return;
	}

	if (!has_body("application/sdp"))
		return;

	# HMP's SDP ends with 2 CRLFs which breaks rtpengine and jssip. strip out the double CRLFs
	while (search_body("\r\n\r\n"))
	{
		xlog("L_INFO", "route[RTPPROXY]: body contains double CRLFs\n");

		xlog("L_INFO", "route[RTPPROXY]: replace double CRLFs with a single CRLF...\n");
		replace_body_all("\r\n\r\n","\r\n");

		xlog("L_INFO", "route[RTPPROXY]: apply the changes made to the body...\n");
		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: changes successfully applied.\n");
		}
		else
		{
			xlog("L_INFO", "route[RTPPROXY]: failed to apply change made to the sip message.\n");
			break;
		}
	}

	if (search_body("[\r\n]+$"))
	{
		xlog("L_INFO", "route[RTPPROXY]: sdp body ends with CRLF\n");

		xlog("L_INFO", "route[RTPPROXY]: replace ending CRLF with empty string...\n");
		replace_body("[\r\n]+$","");

		xlog("L_INFO", "route[RTPPROXY]: apply the changes made to the body...\n");
		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: changes successfully applied.\n");
		}
		else
		{
			xlog("L_INFO", "route[RTPPROXY]: failed to apply change made to the sip message.\n");
		}
	}

	if (sdp_with_media("video"))
	{
		# Voice4Net doesn't currently support video, so remove video from SDP
		sdp_remove_media("video");

		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: video media removed\n");
		}
	}

	if (sdp_with_codecs_by_name("PCMU"))
	{
		# PCMU performs well in our load testing (on FS), so let's force that codec if it's being offered
		sdp_keep_codecs_by_name("PCMU,telephone-event","audio");

		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: codec list set to PCMU only\n");
		}
	}

	if (isflagset(SRC_WS))
	{
		xlog("L_INFO", "route[RTPPROXY]: SRC_WS=true\n");
	}
	else
	{
		xlog("L_INFO", "route[RTPPROXY]: SRC_WS=false\n");
	}

	if (isflagset(DST_WS))
	{
		xlog("L_INFO", "route[RTPPROXY]: DST_WS=true\n");
	}
	else
	{
		xlog("L_INFO", "route[RTPPROXY]: DST_WS=false\n");
	}

	if (isflagset(SRC_WS) && isflagset(DST_WS))
	{
		$avp(rtpproxy_offer_flags) = "rtcp-mux-accept replace-origin replace-session-connection ICE=force RTP/SAVPF SDES-off";
		$avp(rtpproxy_answer_flags) = "rtcp-mux-accept replace-origin replace-session-connection ICE=force RTP/SAVPF SDES-off";
	}
	else if (isflagset(SRC_WS) && !isflagset(DST_WS))
	{
		$avp(rtpproxy_offer_flags) = "rtcp-mux-demux replace-session-connection ICE=remove RTP/AVP";
		$avp(rtpproxy_answer_flags) = "rtcp-mux-demux replace-origin replace-session-connection ICE=force RTP/SAVPF";
	}
	else if (!isflagset(SRC_WS) && isflagset(DST_WS))
	{
		$avp(rtpproxy_offer_flags) = "rtcp-mux-offer replace-origin replace-session-connection ICE=force RTP/SAVPF SDES-off";

		if (is_request() && is_direction("downstream"))
		{
			$avp(rtpproxy_answer_flags) = "replace-origin replace-session-connection ICE=remove RTP/AVP";

			if (sdp_get_line_startswith("$avp(mline)","m=audio"))
			{
				xlog("L_INFO", "route[RTPPROXY]: m-line: $avp(mline)\n");

				# FS might send an INVITE with RTP/SAVPF via UDP (not WS). if so, accept it.
				if ($avp(mline) =~ "SAVPF")
				{
					$avp(rtpproxy_answer_flags) = "rtcp-mux-offer replace-origin replace-session-connection ICE=force RTP/SAVPF";
				}
			}
		}
	}
	else if (!isflagset(SRC_WS) && !isflagset(DST_WS))
	{
		$avp(rtpproxy_offer_flags) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove RTP/AVP";
		$avp(rtpproxy_answer_flags) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove RTP/AVP";
	}

	xlog("L_INFO", "route[RTPPROXY]: offer_flags=($avp(rtpproxy_offer_flags))\n");
	xlog("L_INFO", "route[RTPPROXY]: answer_flags=($avp(rtpproxy_answer_flags))\n");

	if (is_request() && is_direction("downstream"))
	{
		xlog("L_INFO", "route[RTPPROXY]: manage rtp with offer flags");
		rtpengine_manage($avp(rtpproxy_offer_flags));
	}
	else
	{
		xlog("L_INFO", "route[RTPPROXY]: manage rtp with answer flags");
		rtpengine_manage($avp(rtpproxy_answer_flags));
	}

	msg_apply_changes();

	# chrome 63 doesn't like the crypto line being present in the sdp. remove it.
	if (sdp_get_line_startswith("$avp(cryptoline)","a=crypto"))
	{
		xlog("L_INFO", "route[RTPPROXY]: crypto-line: $avp(cryptoline)\n");
		sdp_remove_line_by_prefix("a=crypto");

		msg_apply_changes();
	}
}

# Manage incoming replies
onreply_route[MANAGE_REPLY]
{
	xlog("L_INFO", "onreply_route[MANAGE_REPLY]: $rs");

	# JsSIP can't play early media, so change 183 Session Progress and 180 Ringing and remove SDP
	if (isflagset(SRC_WS) && t_check_status("183"))
	{
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: change response code from 183 to 180...\n");
		change_reply_status("180","Ringing");
		remove_body();
		exit;
	}

	# the FreeSWITCH mod_conference module sometimes sends incorrect and/or wacky contact headers. try to handle them here
	# contact header is present, status is 200 OK, method is UPDATE OR method is INVITE and this is a (re)INVITE, user agent is freeswitch, request sent by jssip
	if (is_present_hf("Contact") && status=="200" && (is_method("UPDATE") || is_method("INVITE") && $T_req($tt)!=$null) && pcre_match("$ua","(?i)^freeswitch") && pcre_match("$T_req($ua)","(?i)^jssip"))
	{
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: this is 200 OK response from freeswitch to a (re)INVITE or UPDATE sent by jssip.\n");

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact=$ct\n");

		$vn(curi_user)=$null;

		if (!starts_with("$ct","<(null)>")) # sometimes FS sends a contact that starts with '<(null)>'
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: get user from contact uri...\n");
			$vn(curi_user)=@contact.uri.user;
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact_uri_user=$vn(curi_user)\n");
		}

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: to_user=$tU\n");
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: from_user=$fU\n");

		if ($vn(curi_user)==$null || (!cmp_istr("$vn(curi_user)","$fU") && !cmp_istr("$vn(curi_user)","$tU")))
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact user does not match the To user or the From user. remove the Contact header...\n");
			remove_hf("Contact");
			msg_apply_changes();
		}
	}

	route(NATDETECT);

	if (status=~"[12][0-9][0-9]")
	{
		# manage rtp proxy
		route(RTPPROXY);

		# manage nat stuff
		route(NATMANAGE);
	}

	if (is_method("REGISTER") && status=="200")
	{
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: registration succeeded!\n");

		# FS adds a Date header. we don't need that clutter!
		remove_hf("Date");

		$vn(path)=$null;
		$var(path_removed)=0;

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: path=$hdr(Path)\n");

		if (is_present_hf("Path"))
		{
			# FS moves the "lr" param outside of the angle brackets. kamailio doesn't like that when saving the AOR. move it back.
			if (pcre_match("$hdr(Path)","^<sip.*>;lr"))
			{
				# move the lr param into the angle brackets
				$vn(path)=$(hdr(Path){re.subst,/^<sip:(.*)>;lr(.*)$/<sip:\1;lr>/i});
			}
			else
			{
				$vn(path)=$hdr(Path);
			}

			xlog("L_INFO","onreply_route[MANAGE_REPLY]: path=$vn(path)\n");

			if (is_myself($(vn(path){re.subst,/<?([^>])>?/\1/i})))
			{
				# if the host in the Path header is equal to the kamailio IP, it needs to be removed so that sip pings will be sent to the sip client, not here

				xlog("L_INFO","onreply_route[MANAGE_REPLY]: Path header equals myself. remove Path header...\n");
				remove_hf("Path");
				$var(path_removed)=1;
			}
			else
			{
				xlog("L_INFO","onreply_route[MANAGE_REPLY]: modify Path header...\n");

				# change the Path header
				assign_hf_value("Path","$vn(path)");
			}

			# save the new Path header
			msg_apply_changes();
		}

		if (isflagset(REG_SOCK))
		{
			# if the socket flag is set and $xavp(reg=>socket) has a value, the registrar module's 'save' function will pull the socket info from it
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: sock_info=$xavp(reg=>socket)\n");
		}

		# store the server's User-Agent value in a local variable
		$var(uas)=$ua;

		# change the User-Agent header to the client's value
		assign_hf_value("User-Agent","$avp(uac)");

		# save the changes
		if (msg_apply_changes())
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: User-Agent header changed to $avp(uac)\n");
		}

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: save the AOR...\n");
		if (save("location","0x05"))
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: successfully saved AOR.\n");
		}

		if ($avp(websocket_endpoint)!=$null)
		{
			# if this sip client has a tcp connection (i.e. jssip via web socket),
			# save the tcp connection id and aor to the websockets hash table
			# so that when the tcp connection gets disconnected the sip registration can be looked up
			# and a sip INFO packet can be sent to the registrar using uac_req_send()

			xlog("L_INFO","onreply_route[MANAGE_REPLY]: websocket_endpoint=$avp(websocket_endpoint)\n");

			$var(json)="{}";

			jansson_set("string","event_type","websocket_registered","$var(json)");

			if ($avp(connection_id)!=$null)
			{
				jansson_set("int","connection_id",$avp(connection_id),"$var(json)");
			}

			jansson_set("string","websocket_endpoint","$avp(websocket_endpoint)","$var(json)");
			jansson_set("string","from_uri","$fu","$var(json)");
			jansson_set("string","from_tag","$ft","$var(json)");
			jansson_set("string","to_uri","$tu","$var(json)");
			jansson_set("string","to_tag","$tt","$var(json)");
			jansson_set("string","contact","$T_req($ct)","$var(json)");
			jansson_set("string","call_id","$ci","$var(json)");
			jansson_set("string","user_agent","$avp(uac)","$var(json)");

			if ($T_req($sel(@via[1]))!=$null)
			{
				jansson_set("string","via","$T_req($sel(@via[1]))","$var(json)");
			}

			if ($T_req($hdr(Path))!=$null)
			{
				jansson_set("string","path","$T_req($hdr(Path))","$var(json)");
			}

			if ($T_req($ar)!=$null)
			{
				jansson_set("string","auth_realm","$T_req($ar)","$var(json)");
			}

			if ($T_req($au)!=$null)
			{
				jansson_set("string","auth_user","$T_req($au)","$var(json)");
			}

			$vn(auth)=$T_req($hdr(Authorization));

			if ($vn(auth)==$null)
			{
				$vn(auth)=$T_req($hdr(Proxy-Authorization));
			}

			if ($vn(auth)!=$null)
			{
				jansson_set("string","authorization","$vn(auth)","$var(json)");
			}

			xlog("L_INFO","onreply_route[MANAGE_REPLY]: registration_json_string=$var(json)\n");

			$sht(websockets=>$avp(websocket_endpoint)::registration)=$var(json);
		}

		if ($var(path_removed))
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: append Path header...\n");
			append_hf("Path: $vn(path)\r\n");
		}

		# revert the User-Agent header back to the server's value
		assign_hf_value("User-Agent","$var(uas)");

		# save the changes
		if (msg_apply_changes())
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: User-Agent header changed back to $var(uas)\n");
		}
	}
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH]
{
	xlog("L_INFO","new branch to $ru\n");
	route(NATMANAGE);
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE]
{
	route(NATMANAGE);

	if (isflagset(FLT_WS))
	{
		rtpengine_delete();
	}

	if (t_is_canceled())
	{
		exit;
	}
}

event_route[xhttp:request]
{
	xlog("L_INFO", "incoming http request url=$hu!\n");

	set_reply_close();
	set_reply_no_connect();

	if (!($rm =~ "GET"))
	{
		xlog("L_INFO","rejecting HTTP request $rm from $si:$sp\n");
		xhttp_reply("405","Method Not Allowed","","");
		exit;
	}

	$var(max_ws)=MAX_WS;
	$var(count)=$sht(websockets=>$si::count);
	$var(remaining)=$var(max_ws)-$var(count);

	if ($Rp==MY_HTTP_PORT || $Rp==MY_HTTPS_PORT)
	{
		if ($hu=~"/websockets")
		{
			# chrome requires the 'Access-Control-Allow-Origin' header
			append_to_reply("Access-Control-Allow-Origin: *\r\n");

			xhttp_reply("200","OK","application/json",'{"max_connections":$var(max_ws),"total_connections":$var(count),"remaining_connections":$var(remaining)}');
			exit;
		}
	}

	if (!($hdr(Connection) =~ "Upgrade"))
	{
		xlog("L_INFO","rejecting HTTP connection $hdr(Connection) request from $si:$sp\n");
		xhttp_reply("400","Bad Request","text/plain","Missing Header:\n\nConnection: Upgrade");
		exit;
	}

	if (!($hdr(Upgrade) =~ "websocket"))
	{
		xlog("L_INFO","rejecting HTTP upgrade $hdr(Upgrade) request from $si:$sp\n");
		xhttp_reply("400","Bad Request","text/plain","Missing Header:\n\nUpgrade: websocket");
		exit;
	}

	if (!($hdr(Sec-WebSocket-Protocol) =~ "sip"))
	{
		xlog("L_INFO","rejecting request for websocket protocol $hdr(Sec-WebSocket-Protocol) from $si:$sp\n");
		xhttp_reply("400","Bad Request","text/plain","Missing Header:\n\nSec-WebSocket-Protocol: sip");
		exit;
	}

	if ($Rp != MY_WSS_PORT && $Rp != MY_HTTP_PORT)
	{
		xlog("L_INFO","rejecting HTTP request received on $Rp from $si:$sp\n");
		xhttp_reply("403","Forbidden","text/plain","Unauthorized WebSocket Port:\n\n$sp");
		exit;
	}

	$var(allowed)=0;

	sht_iterator_start("http_origins_iterator","http_origins");

	while (sht_iterator_next("http_origins_iterator"))
	{
		if ($shtitval(http_origins_iterator)==1)
		{
			$var(allowed_origin)=$shtitkey(http_origins_iterator);

			xlog("L_INFO","allowed_origin=$var(allowed_origin)\n");

			$var(pattern)=$(var(allowed_origin){s.replace,/,\/}{s.replace,.,\.}{s.replace,*,[A-Za-z0-9\-].*});

			xlog("L_INFO","pattern=$var(pattern)\n");

			if ($hdr(Origin) =~ $var(pattern))
			{
				xlog("L_INFO","$hdr(Origin) is allowed!\n");
				$var(allowed)=1;
				break;
			}
		}
	}

	sht_iterator_end("http_origins_iterator");

	if ($var(allowed)==0)
	{
		xlog("L_INFO","rejecting http Origin $hdr(Origin) from $si:$sp\n");
		xhttp_reply("403","Forbidden","text/plain","Unknown Origin:\n\nOrigin: $hdr(Origin)");
		exit;
	}

	if (ws_handle_handshake())
	{
		$var(count) = $shtinc(websockets=>$si::count);
		xlog("L_INFO","opened websocket $var(count) of $var(max_ws) for $si:$sp\n");
		exit;
	}

	xlog("L_INFO","unhandled HTTP request $rm from $si:$sp\n");
	xhttp_reply("404","Not Found","","");
}

event_route[websocket:closed]
{
	$var(count) = $shtdec(websockets=>$si::count);

	xlog("L_INFO","event_route[websocket:closed]: websocket $si:$sp closed!\n");

	$var(websocket_endpoint)=$si+":"+$sp;

	$var(json)=$sht(websockets=>$var(websocket_endpoint)::registration);

	xlog("L_INFO","event_route[websocket:closed]: registration_json=$var(json)\n");

	if ($var(json)!=0)
	{
		jansson_get("from_uri",$var(json),"$var(from_uri)");
		jansson_get("to_uri",$var(json),"$var(to_uri)");
		jansson_get("contact_uri",$var(json),"$var(contact_uri)");

		xlog("L_INFO","event_route[websocket:closed]: from_uri=$var(from_uri)\n");
		xlog("L_INFO","event_route[websocket:closed]: to_uri=$var(to_uri)\n");
		xlog("L_INFO","event_route[websocket:closed]: contact_uri=$var(contact_uri)\n");

		xlog("L_INFO","event_route[websocket:closed]: create a sip INFO message for $var(aor)...\n");
		$uac_req(method)="INFO";
		$uac_req(ruri)=$var(from_uri)+";transport=udp";
		$uac_req(furi)=$var(from_uri);
		$uac_req(turi)=$var(to_uri);
		$uac_req(hdrs)="Contact: "+$var(contact_uri)+"\r\nContent-Type: application/json\r\nContent-Disposition: Info-Package\r\nInfo-Package: voice4net/websocket-disconnected";

		jansson_set("string","event_type","websocket_disconnected","$var(json)");

		$uac_req(body)=$var(json);

		xlog("L_INFO","event_route[websocket:closed]: send the INFO message...\n");
		uac_req_send();
	}

	if ($sht(websockets=>$si::count) < 1)
	{
		sht_rm_name_re("websockets=>$(si{re.subst,/\\./\\\\./g})::.*");
	}
}