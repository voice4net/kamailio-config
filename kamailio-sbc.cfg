#!KAMAILIO
#!define DBURL "mysql://kamailio:__PASSWORD__@localhost/kamailio"
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define SIP_TRACE 12
#!substdef "!MY_IP_ADDR!__IP_ADDRESS__!g"
#!substdef "!MY_DOMAIN!__DOMAIN_NAME__!g"

####### Global Parameters #########

debug=2
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=4
disable_tcp=yes
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
listen=MY_IP_ADDR
listen=MY_DOMAIN
port=5060

####### Modules Section ########

loadmodule "db_mysql.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "path.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "jsonrpcs.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "permissions.so"
loadmodule "nathelper.so"
loadmodule "domain.so"
loadmodule "htable.so"
loadmodule "textopsx.so"
loadmodule "ctl.so"
loadmodule "siptrace.so"

# ----------------- setting module-specific parameters --------------- #

# ----- tm params ----- #
modparam("tm","failure_reply_mode",3)
modparam("tm","auto_inv_100_reason","Trying")

# ----- rr params ----- #
modparam("rr","append_fromtag",1)

# ----- usrloc params ----- #
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", 0)

# ----- permissions params ----- #
modparam("permissions","db_url",DBURL)
modparam("permissions","db_mode",1)

# ----- domain params ----- #
modparam("domain","db_url",DBURL)

# ----- htable params ----- #
modparam("htable","db_url",DBURL)
modparam("htable","htable","dids=>size=10;autoexpire=0;dbtable=did_routing;dbmode=0;cols='did,destination_domain'")

# ----- nathelper params ----- #
modparam("nathelper","natping_interval",30)
modparam("nathelper","ping_nated_only",1)
modparam("nathelper","sipping_bflag",FLB_NATSIPPING)
modparam("nathelper","sipping_from","sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

# ----- ctl params ----- #
modparam("ctl", "mode", 0777)
modparam("ctl", "user", "kamailio")
modparam("ctl", "group", "kamailio")

# ----- siptrace params ----- #
modparam("siptrace","trace_on",1)
modparam("siptrace","trace_flag",SIP_TRACE)
modparam("siptrace","trace_to_database",0)
modparam("siptrace","duplicate_uri","sip:66.180.62.26:9060")
modparam("siptrace","hep_capture_id",2079)
modparam("siptrace","hep_mode_on",1)
modparam("siptrace","trace_mode",0)

####### Routing Logic ########

request_route
{
	route(REQINIT);

	route(OPTIONS);

	xlog("L_INFO","SIP Request: SourceIP=$si:$sp;Method=$rm;From=$fu;To=$tu;Message=$mb");

	sip_trace();
	setflag(SIP_TRACE);

	# NAT detection
	route(NATDETECT);

	if (is_method("CANCEL"))
	{
		if (t_check_trans())
		{
			route(RELAY);
		}

		exit;
	}

	# route messages within existing dialogs
	route(WITHINDLG);

	# handle retransmissions
	if (t_precheck_trans())
	{
		t_check_trans();
		exit;
	}

	t_check_trans();

	if ($rU==$null && !is_method("REGISTER"))
	{
		xlog("L_INFO","request_route: no user name in request URI...\n");

		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# route DIDs
	route(DID);

	# check for domain specific attributes
	route(DOMAIN);

	# route requests from trusted source domains
	route(SIPOUT);

	sl_send_reply("404","Not Found");
	exit;
}

route[RELAY]
{
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE"))
	{
		if (!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|REGISTER|SUBSCRIBE|NOTIFY|UPDATE"))
	{
		if (!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE"))
	{
		if (!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	# record routing for dialog forming requests (in case they are routed)
	if (!is_method("REGISTER"))
	{
		xlog("L_INFO","route(RELAY): record route...\n");
		record_route();
	}

	if (!t_relay())
	{
		xlog("L_INFO","route(RELAY): message relay failed!\n");
		sl_reply_error();
	}

	exit;
}

route[REQINIT]
{
	if ($ua =~ "friendly-scanner|VaxSIPUserAgent|sipcli|sipsak|SIPp|hamdan")
	{
		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}

	if (is_method("SUBSCRIBE"))
	{
		sl_send_reply("501","Not Implemented");
		exit;
	}

	if (!mf_process_maxfwd_header("10"))
	{
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511","7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	if (!allow_source_address())
	{
		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}
}

route[OPTIONS]
{
	# is this an OPTIONS request ???
	# OR a keep-alive NOTIFY (the Cisco phones send a NOTIFY instead of OPTIONS)
	if (is_method("OPTIONS") || (is_method("NOTIFY") && is_present_hf("Event") && $hdr(Event)=="keep-alive"))
	{
		if (uri==myself)
		{
			sl_send_reply("200","OK");
			exit;
		}

		route(RELAY);
		exit;
	}
}

# Caller NAT detection
route[NATDETECT]
{
	xlog("L_INFO","route[NATDETECT]: force rport...\n");
	force_rport();

	if (proto==WS || proto==WSS || nat_uac_test(55))
	{
		append_hf("P-Hint: NAT\r\n");

		xlog("L_INFO","route[NATDETECT]: UA is behind NAT!\n");

		xlog("L_INFO","route[NATDETECT]: set FLT_NATS flag...\n");
		setflag(FLT_NATS);

		if (is_first_hop()) {
			xlog("L_INFO","route[NATDETECT]: fix nated contact...\n");
			fix_nated_contact();

			if (is_request() && is_method("INVITE") && has_body("application/sdp")) {
				xlog("L_INFO","route[NATDETECT]: fix nated sdp...\n");
				fix_nated_sdp("7");
			}

			if (is_reply() && t_check_status("(200)|(183)") && has_body("application/sdp")) {
				xlog("L_INFO","route[NATDETECT]: fix nated sdp.\n");
				fix_nated_sdp("7");
			}
		}
	}
}

# signaling updates for NAT traversal
route[NATMANAGE] {
	if (is_request()) {
		xlog("L_INFO","route[NATMANAGE]: IsRequest=TRUE;SipMethod=($rm);SourceIP=($si);SourcePort=($sp);RequestURI=($ru);\n");
		xlog("L_INFO","route[NATMANAGE]: ToURI=($tu);ToDisplayName=($tn);ToTag=($tt);IsRequest=TRUE\n");
		if (has_totag()) {
			xlog("L_INFO","route[NATMANAGE]: HasToTag=TRUE;ToTag=($tt)\n");
			if (check_route_param("nat=yes")) {
				xlog("L_INFO","route[NATMANAGE]: route header contains 'nat=yes'. set FLB_NATB flag...\n");
				setbflag(FLB_NATB);
			}
		}
	}

	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) {
		xlog("L_INFO","route[NATMANAGE]: no NAT flags are set. exit.\n");
		return;
	}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}

	return;
}

route[DID]
{
	if (uri!=myself) return;

	if (!is_method("INVITE")) return;

	xlog("L_INFO","route[DID]: RequestURIUser=$rU\n");

	$var(did)=$rU;

	$vn(domain)=$sht(dids=>$var(did));

	if ($vn(domain)==$null && $(var(did){s.len})==11 && $(var(did){s.substr,0,1})=="1")
	{
		$vn(domain)=$sht(dids=>$(var(did){s.substr,1,0}));

		if ($vn(domain)!=$null)
		{
			$var(did)=$(var(did){s.substr,1,0});
			xlog("L_INFO","route[DID]: stripped_did=$var(did)\n");
		}
	}

	if ($vn(domain)==$null && is_uri_user_e164("$ru"))
	{
		xlog("L_INFO","route[DID]: E.164=TRUE\n");
		$var(did)=$(rU{re.subst,/^\+?[1-9]([0-9]{1,14})$/\1/});
		xlog("L_INFO","route[DID]: stripped_did=$var(did)\n");

		$vn(domain)=$sht(dids=>$var(did));
	}

	if ($vn(domain)!=$null)
	{
		xlog("L_INFO","route[DID]: match found.\n");

		xlog("L_INFO","route[DID]: domain=$vn(domain)\n");

		if ($vn(domain)=~":")
		{
			xlog("L_INFO","route[DID]: domain contains ':'\n");
			$vn(port)=$(vn(domain){re.subst,/^(.*):([0-9]{1,5})$/\2/});
			xlog("L_INFO","route[DID]: port=$vn(port)\n");
			if ($vn(port)!=$null)
			{
				$vn(domain)=$(vn(domain){re.subst,/^(.*):([0-9]{1,5})$/\1/});
				xlog("L_INFO","route[DID]: domain=$vn(domain)\n");
				$rp=$vn(port);
				$tp=$vn(port);
			}
		}

		$rU=$var(did);
		$rd=$vn(domain);
		$tU=$var(did);
		$td=$vn(domain);

		msg_apply_changes();

		xlog("L_INFO","route[DID]: RequestURI=$ru\n");
		xlog("L_INFO","route[DID]: ToURI=$tu\n");

		route(RELAY);
		exit;
	}
}

route[DOMAIN]
{
	xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the From URI domain...\n");

	xlog("L_INFO","route[DOMAIN]: FromDomain=$fd\n");

	$var(domain_found)=lookup_domain("$fd");

	xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");

	if ($var(domain_found)<=0)
	{
		xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the source ip...\n");

		xlog("L_INFO","route[DOMAIN]: SourceIP=$si\n");

		$var(domain_found)=lookup_domain("$si");

		xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");
	}

	if ($var(domain_found))
	{
		xlog("L_INFO","route[DOMAIN]: domain match found!\n");

		if (uri==myself && $avp(default_destination_host)!=$null)
		{
			xlog("L_INFO","route[DOMAIN]: overwrite default destination host...\n");
			$rd=$avp(default_destination_host);

			if ($avp(default_destination_port)!=$null)
			{
				xlog("L_INFO","route[DOMAIN]: overwrite default destination port...\n");
				$rp=$avp(default_destination_port);
			}

			xlog("L_INFO","route[DOMAIN]: RequestDomain=$rd;RequestPort=$rp;\n");
		}
	}
}

route[SIPOUT]
{
	if (uri==myself) return;

	loose_route();

	route(RELAY);
	exit;
}

route[WITHINDLG]
{
	if (!has_totag()) return;

	if (loose_route())
	{
		route(RELAY);
		exit;
	}

	if (is_method("ACK"))
	{
		if (t_check_trans())
		{
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		}
		else
		{
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not Found");
	exit;
}

# Manage incoming replies
onreply_route[MANAGE_REPLY]
{
	xlog("L_INFO","onreply_route[MANAGE_REPLY]: incoming reply\n");

	route(NATDETECT);

	if (status=~"[12][0-9][0-9]") {
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: go to route[NATMANAGE]...\n");
		route(NATMANAGE);
	}
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH]
{
	xlog("L_INFO","new branch to $ru\n");
	route(NATMANAGE);
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE]
{
	route(NATMANAGE);

	if (t_is_canceled())
	{
		exit;
	}
}
