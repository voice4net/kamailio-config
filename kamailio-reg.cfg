#!KAMAILIO

#!define DBURL "mysql://kamailio:__PASSWORD__@localhost/kamailio"
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define RTPPROXY_REQUIRED 8
#!define SIP_TRACE 12

#!subst "/REGISTRAR_IP/__REGISTRAR_IP__/"
#!subst "/REGISTRAR_PORT/5060/"

#!substdef "!MY_IP_ADDR!__IP_ADDRESS__!g"
#!substdef "!MY_DOMAIN!__DOMAIN_NAME__!g"

####### Global Parameters #########

debug=2
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=4
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
force_rport=yes
listen=MY_IP_ADDR
listen=MY_DOMAIN
port=5060

tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384
enable_tls=yes

####### Modules Section ########

loadmodule "db_mysql.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "path.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "jsonrpcs.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "permissions.so"
loadmodule "nathelper.so"
loadmodule "domain.so"
loadmodule "sqlops.so"
loadmodule "tls.so"
loadmodule "rtpengine.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"
loadmodule "htable.so"
loadmodule "regex.so"
loadmodule "ctl.so"
loadmodule "siptrace.so"
loadmodule "uac.so"
loadmodule "jansson.so"
loadmodule "ipops.so"

# ----------------- setting module-specific parameters --------------- #

# ----- tm params ----- #
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "auto_inv_100_reason", "Trying")

# ----- rr params ----- #
modparam("rr", "append_fromtag", 1)

# ----- usrloc params ----- #
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", 0)

# ----- registrar params ----- #
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "outbound_mode", 0)
modparam("registrar", "received_avp", "$avp(RECEIVED)")
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 2)
modparam("registrar", "path_use_received", 0)
modparam("registrar", "xavp_cfg", "reg")
modparam("registrar", "xavp_rcd", "ulrcd")

# ----- permissions params ----- #
modparam("permissions","db_url",DBURL)
modparam("permissions","db_mode",1)

# ----- domain params ----- #
modparam("domain","db_url",DBURL)

# ----- nathelper params ----- #
modparam("nathelper","natping_interval",30)
modparam("nathelper","ping_nated_only",0)
modparam("nathelper","sipping_bflag",FLB_NATSIPPING)
modparam("nathelper","sipping_from","sip:pinger@voice4net.net")
modparam("nathelper","sipping_method","OPTIONS")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

# ----- sqlops params ----- #
modparam("sqlops","sqlcon","routing=>mysql://kamailio:__PASSWORD__@localhost/kamailio")

# ----- tls params ----- #
modparam("tls","private_key","/etc/kamailio/ssl/epbxcomcertandkey.pem")
modparam("tls","certificate","/etc/kamailio/ssl/epbxcomcertandkey.pem")
modparam("tls","verify_certificate",0)
modparam("tls","require_certificate",0)

# ----- rtpengine params ----- #
modparam("rtpengine","rtpengine_sock","udp:127.0.0.1:2223")

# ----- htable params ----- #
modparam("htable","db_url",DBURL)
modparam("htable","htable","user_agents=>size=7;autoexpire=0;dbtable=user_agents;dbmode=0")

# ----- uac params ----- #
modparam("uac","restore_mode","none")

# ----- jsonrpcs params ----- #
modparam("jsonrpcs","pretty_format",1)

# ----- siptrace params ----- #
modparam("siptrace","trace_on",1)
modparam("siptrace","trace_flag",SIP_TRACE)
modparam("siptrace","trace_to_database",0)
modparam("siptrace","duplicate_uri","sip:66.180.62.26:9060")
modparam("siptrace","hep_capture_id",2078)
modparam("siptrace","hep_mode_on",1)
modparam("siptrace","trace_mode",0)

# ----- ctl params ----- #
modparam("ctl","mode",0770)
modparam("ctl","user","kamailio")
modparam("ctl","group","kamailio")

####### Routing Logic ########

request_route
{
	route(REQINIT);

	route(OPTIONS);

	xlog("L_INFO","SIP Request: SourceIP=$si:$sp;Method=$rm;From=$fu;To=$tu;Message=$mb");

	sip_trace();
	setflag(SIP_TRACE);

	# NAT detection
	route(NATDETECT);

	if (is_method("CANCEL"))
	{
		if (t_check_trans())
		{
			route(RELAY);
		}

		exit;
	}

	# route messages within existing dialogs
	route(WITHINDLG);

	# handle retransmissions
	if (t_precheck_trans())
	{
		t_check_trans();
		exit;
	}

	t_check_trans();

	# handle REGISTER requests (send 100 Trying and add Path header)
	route(REGISTER);

	if (!is_method("REGISTER") && $rU==$null)
	{
		xlog("L_INFO","request_route: no user name in request URI...\n");

		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# check for domain specific attributes
	route(DOMAIN);

	# route requests from trusted source domains
	route(SIPOUT);

	xlog("L_INFO","request_route: send a 404 Not Found and exit.\n");
	sl_send_reply("404","Not Found");
	exit;
}

route[RELAY]
{
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE"))
	{
		if (!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|REGISTER|SUBSCRIBE|NOTIFY|UPDATE"))
	{
		if (!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE"))
	{
		route(RTPPROXY);
		if (!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	# record routing for dialog forming requests (in case they are routed)
	if (!is_method("REGISTER"))
	{
		xlog("L_INFO","route(RELAY): record route...\n");
		record_route();
	}

	if (!t_relay())
	{
		xlog("L_INFO","route(RELAY): message relay failed!\n");
		sl_reply_error();
	}

	exit;
}

route[REQINIT]
{
	# fuck these guys
	if ($ua =~ "friendly-scanner|VaxSIPUserAgent|sipcli|sipsak|SIPp|hamdan")
	{
		#append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		#sl_send_reply("403","Forbidden");
		exit;
	}

	if (is_method("INVITE|REGISTER|SUBSCRIBE|OPTIONS"))
	{
		if (!is_present_hf("User-Agent") && !is_present_hf("Server"))
		{
			exit;
		}

		$var(user_agent)=$ua;

		if (is_present_hf("Server") && !is_present_hf("User-Agent"))
		{
			$var(user_agent)=$hdr(Server);
		}

		$var(allowed)=0;

		sht_iterator_start("ua_iterator","user_agents");

		while (sht_iterator_next("ua_iterator"))
		{
			if ($shtitval(ua_iterator)==1 && $var(user_agent) =~ $shtitkey(ua_iterator))
			{
				xlog("L_INFO","route[REQINIT]: $ua is allowed!\n");
				$var(allowed)=1;
				break;
			}
		}

		sht_iterator_end("ua_iterator");

		if ($var(allowed)==0)
		{
			exit;
		}
	}

	if (!mf_process_maxfwd_header("10"))
	{
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

route[OPTIONS]
{
	# is this an OPTIONS request ???
	# OR a keep-alive NOTIFY (the Cisco phones send a NOTIFY instead of OPTIONS)
	if (is_method("OPTIONS") || (is_method("NOTIFY|MESSAGE") && is_present_hf("Event") && $hdr(Event)=="keep-alive"))
	{
		if (uri==myself)
		{
			sl_send_reply("200","OK");
			exit;
		}

		route(RELAY);
		exit;
	}
}

route[NATDETECT]
{
	force_rport();

	if (nat_uac_test(55))
	{
		xlog("L_INFO","route[NATDETECT]: UA is behind NAT!\n");

		xlog("L_INFO","route[NATDETECT]: set FLT_NATS flag...\n");
		setflag(FLT_NATS);

		if (is_first_hop())
		{
			xlog("L_INFO","route[NATDETECT]: fix nated contact...\n");
			fix_nated_contact();

			if (is_request() && is_method("INVITE") && has_body("application/sdp"))
			{
				xlog("L_INFO","route[NATDETECT]: fix nated sdp...\n");
				fix_nated_sdp("3");
			}

			if (is_reply() && t_check_status("(200)|(183)") && has_body("application/sdp"))
			{
				xlog("L_INFO","route[NATDETECT]: fix nated sdp...\n");
				fix_nated_sdp("3");
			}
		}
	}
}

# signaling updates for NAT traversal
route[NATMANAGE]
{
	if (is_request())
	{
		xlog("L_INFO","route[NATMANAGE]: IsRequest=TRUE;SipMethod=($rm);SourceIP=($si);SourcePort=($sp);RequestURI=($ru);\n");
		xlog("L_INFO","route[NATMANAGE]: ToURI=($tu);ToDisplayName=($tn);ToTag=($tt);IsRequest=TRUE\n");
		if (has_totag())
		{
			xlog("L_INFO","route[NATMANAGE]: HasToTag=TRUE;ToTag=($tt)\n");
			if (check_route_param("nat=yes"))
			{
				xlog("L_INFO","route[NATMANAGE]: route header contains 'nat=yes'. set FLB_NATB flag...\n");
				setbflag(FLB_NATB);
			}
		}
	}

	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
	{
		xlog("L_INFO","route[NATMANAGE]: no NAT flags are set. exit.\n");
		return;
	}

	if (is_request())
	{
		if (!has_totag())
		{
			if (t_is_branch_route())
			{
				add_rr_param(";nat=yes");
			}
		}
	}
}

route[DOMAIN]
{
	xlog("L_INFO","route[DOMAIN]: SourceIP=$si\n");

	xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the source ip...\n");

	$var(domain_found)=lookup_domain("$si");

	xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");

	if ($var(domain_found)<=0)
	{
		xlog("L_INFO","route[DOMAIN]: FromDomain=$fd\n");

		xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the From URI domain...\n");

		$var(domain_found)=lookup_domain("$fd");

		xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");
	}

	if ($var(domain_found))
	{
		xlog("L_INFO","route[DOMAIN]: domain match found!\n");

		#if ($avp(nat_detection_required)!=$null && $avp(nat_detection_required)=="true")
		#{
		#	xlog("L_INFO","route[DOMAIN]: perform NAT detection...\n");
		#	route(NATDETECT);
		#}

		if ($avp(rtp_proxy_required)!=$null && $avp(rtp_proxy_required)=="true")
		{
			xlog("L_INFO","route[DOMAIN]: set RTPPROXY_REQUIRED flag...\n");
			setflag(RTPPROXY_REQUIRED);
		}

		if ($avp(default_destination_host)!=$null && (uri==myself || (!is_ip($rd) && !dns_query($rd,"rdq"))))
		{
			xlog("L_INFO","route[DOMAIN]: overwrite default destination host...\n");
			$rd=$avp(default_destination_host);

			if ($avp(default_destination_port)!=$null)
			{
				xlog("L_INFO","route[DOMAIN]: overwrite default destination port...\n");
				$rp=$avp(default_destination_port);
			}

			xlog("L_INFO","route[DOMAIN]: RequestDomain=$rd;RequestPort=$rp;\n");
		}
	}

	xlog("L_INFO","route[DOMAIN]: look up domain specific attributes for request URI domain...\n");
	if (lookup_domain("$rd"))
	{
		xlog("L_INFO","route[DOMAIN]: domain match found!\n");

		if ($avp(rtp_proxy_required)!=$null && $avp(rtp_proxy_required)=="true")
		{
			xlog("L_INFO","route[DOMAIN]: set RTPPROXY_REQUIRED flag...\n");
			setflag(RTPPROXY_REQUIRED);
		}
	}
}

route[SIPOUT]
{
	xlog("L_INFO","route[SIPOUT]: check the source ip of the message...\n");
	xlog("L_INFO","route[SIPOUT]: SourceIP=$si\n");

	if (!allow_source_address())
	{
		xlog("L_INFO","route[SIPOUT]: source ip is NOT allowed!\n");

		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}

	loose_route();

	route(RELAY);
	exit;
}

route[WITHINDLG]
{
	if (!has_totag()) return;

	if (loose_route())
	{
		if (is_method("ACK"))
		{
			# ACK is forwarded statelessy
			route(NATMANAGE);
		}

		route(RELAY);
		exit;
	}

	if (is_method("ACK"))
	{
		if (t_check_trans())
		{
			route(RELAY);
			exit;
		}
	}
}

route[REGISTER]
{
	if (is_method("REGISTER"))
	{
		xlog("L_INFO","route[REGISTER]: Method=REGISTER\n");

		sl_send_reply("100","Trying");

		xlog("L_INFO","route[REGISTER]: add path...\n");
		add_path();
	}
}

route[RTPPROXY]
{
	if !(isflagset(RTPPROXY_REQUIRED))
	{
		return;
	}

	if (is_reply() && (status=~"[3456][0-9][0-9]"))
	{
		rtpengine_delete();
		return;
	}

	if (is_reply() && !(status=~"[12][0-9][0-9]"))
		return;

	if (is_method("BYE|CANCEL"))
	{
		rtpengine_delete();
		return;
	}

	if (!has_body("application/sdp"))
		return;

	# HMP's SDP ends with 2 CRLFs which breaks rtpengine and jssip. strip out the double CRLFs
	while (search_body("\r\n\r\n"))
	{
		xlog("L_INFO", "route[RTPPROXY]: body contains double CRLFs\n");

		xlog("L_INFO", "route[RTPPROXY]: replace double CRLFs with a single CRLF...\n");
		replace_body_all("\r\n\r\n","\r\n");

		xlog("L_INFO", "route[RTPPROXY]: apply the changes made to the body...\n");
		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: changes successfully applied.\n");
		}
		else
		{
			xlog("L_INFO", "route[RTPPROXY]: failed to apply change made to the sip message.\n");
			break;
		}
	}

	if (search_body("[\r\n]+$"))
	{
		xlog("L_INFO", "route[RTPPROXY]: sdp body ends with CRLF\n");

		xlog("L_INFO", "route[RTPPROXY]: replace ending CRLF with empty string...\n");
		replace_body("[\r\n]+$","");

		xlog("L_INFO", "route[RTPPROXY]: apply the changes made to the body...\n");
		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: changes successfully applied.\n");
		}
		else
		{
			xlog("L_INFO", "route[RTPPROXY]: failed to apply change made to the sip message.\n");
		}
	}

	if (sdp_with_media("video"))
	{
		# Voice4Net doesn't currently support video, so remove video from SDP
		sdp_remove_media("video");

		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: video media removed\n");
		}
	}

	if (sdp_with_codecs_by_name("PCMU"))
	{
		# PCMU performs well in our load testing (on FS), so let's force that codec if it's being offered
		sdp_keep_codecs_by_name("PCMU,telephone-event","audio");

		if (msg_apply_changes())
		{
			xlog("L_INFO", "route[RTPPROXY]: codec list set to PCMU only\n");
		}
	}

	$avp(rtpproxy_offer_flags) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove RTP/AVP";
	$avp(rtpproxy_answer_flags) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove RTP/AVP";

	xlog("L_INFO", "route[RTPPROXY]: offer_flags=($avp(rtpproxy_offer_flags))\n");
	xlog("L_INFO", "route[RTPPROXY]: answer_flags=($avp(rtpproxy_answer_flags))\n");

	if (is_request() && is_direction("downstream"))
	{
		xlog("L_INFO", "route[RTPPROXY]: manage rtp with offer flags");
		rtpengine_manage($avp(rtpproxy_offer_flags));
	}
	else
	{
		xlog("L_INFO", "route[RTPPROXY]: manage rtp with answer flags");
		rtpengine_manage($avp(rtpproxy_answer_flags));
	}

	msg_apply_changes();
}

# Manage incoming replies
onreply_route[MANAGE_REPLY]
{
	xlog("L_INFO", "onreply_route[MANAGE_REPLY]: $rs");

	# the FreeSWITCH mod_conference module sometimes sends incorrect and/or wacky contact headers. try to handle them here
	# contact header is present, status is 200 OK, method is UPDATE OR method is INVITE and this is a (re)INVITE, user agent is freeswitch, request sent by jssip
	if (is_present_hf("Contact") && status=="200" && (is_method("UPDATE") || is_method("INVITE") && $T_req($tt)!=$null) && pcre_match("$ua","(?i)^freeswitch") && pcre_match("$T_req($ua)","(?i)^jssip"))
	{
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: this is 200 OK response from freeswitch to a (re)INVITE or UPDATE sent by jssip.\n");

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact=$ct\n");

		$vn(curi_user)=$null;

		if (!starts_with("$ct","<(null)>")) # sometimes FS sends a contact that starts with '<(null)>'
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: get user from contact uri...\n");
			$vn(curi_user)=@contact.uri.user;
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact_uri_user=$vn(curi_user)\n");
		}

		xlog("L_INFO","onreply_route[MANAGE_REPLY]: to_user=$tU\n");
		xlog("L_INFO","onreply_route[MANAGE_REPLY]: from_user=$fU\n");

		if ($vn(curi_user)==$null || (!cmp_istr("$vn(curi_user)","$fU") && !cmp_istr("$vn(curi_user)","$tU")))
		{
			xlog("L_INFO","onreply_route[MANAGE_REPLY]: contact user does not match the To user or the From user. remove the Contact header...\n");
			remove_hf("Contact");
			msg_apply_changes();
		}
	}

	route(NATDETECT);

	if (status=~"[12][0-9][0-9]")
	{
		# manage rtp proxy
		route(RTPPROXY);

		# manage nat stuff
		route(NATMANAGE);
	}
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH]
{
	xlog("L_INFO","new branch to $ru\n");
	route(NATMANAGE);
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE]
{
	route(NATMANAGE);

	if (t_is_canceled())
	{
		exit;
	}
}
